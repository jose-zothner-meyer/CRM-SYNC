# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the enitre vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# ⚠️  CRITICAL SECURITY WARNING ⚠️
# This project contains API keys, OAuth tokens, and other sensitive information.
# NEVER commit files containing:
# - API keys (OpenAI, Zoho, Gmail)
# - OAuth tokens and refresh tokens  
# - Client secrets and credentials
# - Personal email content or attachments
#
# Before initializing git repository, verify no sensitive files are tracked:
# git ls-files | grep -E "(api_keys|credentials|token|secret)"
#
# If sensitive files are already tracked, remove them:
# git rm --cached path/to/sensitive/file
# git commit -m "Remove sensitive files from tracking"

# =============================================================================
# SENSITIVE INFORMATION - NEVER COMMIT THESE!
# ====================================================# =============================================================================
# TESTING AND CI/CD
# =============================================================================

# Coverage reports
htmlcov/
.coverage
.coverage.*
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Test configuration files (may contain test API keys)
test_config.yaml
test_api_keys.yaml
testing_credentials.json
test_secrets.json

# Test output files (may contain sensitive data)
test_output/
test_logs/
test_email_dump.json

# mypy
.mypy_cache/
.dmypi.json
dmypy.json

# =============================================================================
# DEVELOPMENT SECURITY
# =============================================================================

# Personal notes and TODO files (may contain sensitive info)
TODO.txt
NOTES.txt
personal_notes.md
development_notes.md
api_notes.txt

# Local configuration overrides
local.py
local_config.py
dev_settings.py
personal_config.yaml

# SSH and deployment keys
id_rsa
id_rsa.pub
deploy_key
deployment.key

# Service account files
service-account.json
service_account_key.json
gcp-key.json
aws-credentials.json========

# API Configuration Files (all possible locations)
config/api_keys.yaml
email_crm_sync/config/api_keys.yaml
api_keys.yaml
**/api_keys.yaml
**/config/api_keys.yaml

# Environment Files
.env
.env.*
.environment
*.env

# OAuth2 and Gmail Authentication Files
gmail_credentials.json
credentials.json
client_secret*.json
google_credentials.json
oauth2_credentials.json
token.pickle
gmail_token.pickle
*_token.pickle
*.token
*.tokens

# Zoho API Credentials and Tokens
zoho_refresh_token.txt
zoho_access_token.txt
zoho_credentials.json
zoho_oauth_token.txt
zoho_client_secret.txt

# OpenAI API Keys (in case stored separately)
openai_api_key.txt
openai_credentials.json

# Other Authentication Files
refresh_token.txt
access_token.txt
client_secret.txt
api_secret.txt

# Certificate and Key Files
*.key
*.pem
*.p12
*.pfx
*.crt
*.cer
*.der

# Configuration Files with Secrets
secrets.yaml
secrets.json
secrets.toml
secrets.ini
config.ini
settings.yaml
local_settings.py

# Backup Configuration Files (often contain sensitive data)
*.yaml.bak
*.json.bak
*.env.bak
*_backup.*

# =============================================================================
# PYTHON ENVIRONMENT
# =============================================================================

# Python bytecode
__pycache__/
*.py[cod]
*$py.class
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
conda/

# =============================================================================
# DEVELOPMENT TOOLS
# =============================================================================

# IDE and Editors
.vscode/
.idea/
*.swp
*.swo
*~
.project
.pydevproject

# OS Files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# =============================================================================
# APPLICATION SPECIFIC
# =============================================================================

# Logs (may contain sensitive information)
*.log
logs/
debug.log
application.log
email_crm_sync.log
zoho_api.log
gmail_api.log

# Temporary files and directories
*.tmp
*.temp
temp/
temporary/
temp_attachments/
downloads/

# Cache directories (may contain API responses)
.cache/
cache/
__pycache__/
.pytest_cache/

# Output files (may contain sensitive data)
zoho_modules_discovery.json
test_results/
output/
processed_emails/
email_exports/

# Database files (may contain cached sensitive data)
*.db
*.sqlite
*.sqlite3

# Debug and diagnostic files
debug_output.txt
api_responses/
diagnostic_data/

# Email content dumps (potentially sensitive)
email_dump.json
email_content.txt
processed_emails.csv

# =============================================================================
# TESTING AND CI/CD
# =============================================================================

# Coverage reports
htmlcov/
.coverage
.coverage.*
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# mypy
.mypy_cache/
.dmypy.json
dmypy.json